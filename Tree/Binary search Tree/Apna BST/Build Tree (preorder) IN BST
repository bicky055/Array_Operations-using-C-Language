#include <iostream>
using namespace std;

struct Node {
  int data;
  Node *lchild,*rchild;
  Node(int val){
    data = val;
    lchild=NULL;
    rchild=NULL;
  }
};
Node* constructBST(int preorder[],int* preorderIdx,int key,int min,int max,int n){
  if(*preorderIdx>=n){
    return NULL;
  }
  Node* root=NULL;
  if(key>min && key<max){
    root=new Node(key);
    *preorderIdx=*preorderIdx+1;

    if(*preorderIdx<n){
      root->lchild=constructBST(preorder,preorderIdx,preorder[*preorderIdx],min,key,n);
    }
    if(*preorderIdx<n){
      root->rchild=constructBST(preorder,preorderIdx,preorder[*preorderIdx],key,max,n);
    }
}
  return root;
}
void printPreorder(Node* root){
  if(root==NULL){
    return;
  }
  cout<<root->data<<" ";
  printPreorder(root->lchild);
  printPreorder(root->rchild);
}

int main(){
  int preorder[]={10,2,1,13,11};
  int n=5;
  int preorderIdx=0;
  Node* root=constructBST(preorder,&preorderIdx,preorder[0],INT_MIN,INT_MAX,n);
  printPreorder(root);
  std::cout << '\n';
  return 0;

}
