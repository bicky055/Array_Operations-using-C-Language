#include <iostream>
using namespace std;

class node
{
     public :
     int data;
     node *next;
     node(int val)
     {
           data = val;
          next = NULL;
     }
};
//Implementation

void insertAtTail(node* &head,int val)
{
     node* n=new node(val);
     //check 1st
     if(head==NULL){
          head=n;
          return ;
     }
     node* temp = head;
     while(temp->next!=NULL)
     {
          temp=temp->next;
     }
     temp->next=n;
}

// insreting at head
void insertAthead(node* &head,int val)
{
     node* n=new node(val);
     n->next=head;
     head = n;
}

// Linear Search

bool search(node* head,int key)
{
     node* temp=head;
     while(temp!=NULL)
     {
          if(temp->data==key)
          {
               return true;
          }
          temp=temp->next;
     }
      return false;
}


void display(node* head)
{
     node* temp=head;
     while(temp!=NULL)
     {
          cout<<temp->data<<"->";
          temp=temp->next;
     }
     cout<<"NULL"<<endl;
}
//Reverse of a LinkedList M-1
node* reverse(node* &head){
	node* prevptr=NULL;
	node* currptr=head;
	node* nextptr;
	
	while(currptr!=NULL){
		nextptr=currptr->next;
		currptr->next=prevptr;
		prevptr=currptr;
		currptr=nextptr;
	}
	return prevptr;
}

//recurive func M-2
node* reverseRecursive(node* head){
	if(head==NULL || head->next==NULL){
		return head;
	}
	node* newhead=reverseRecursive(head->next);
	head->next->next=head;
	head->next=NULL;
	return newhead;
}
int main() {
	
	node* head=NULL;
	insertAtTail(head,10);
	insertAtTail(head,20);
	insertAtTail(head,30);
	insertAtTail(head,40);
	insertAtTail(head,50);
	
	display(head);
	
	//node* newhead=reverse(head);
	//display(newhead);
	
	node* newhead1=reverseRecursive(head);
	display(newhead1);
	
	return 0;
	
}
