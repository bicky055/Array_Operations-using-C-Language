#include <iostream>
using namespace std;

class node
{
     public :
     int data;
     node *next;
     node(int val)
     {
           data = val;
          next = NULL;
     }
};
//Implementation

void insertAtTail(node* &head,int val)
{
     node* n=new node(val);
     //check 1st
     if(head==NULL){
          head=n;
          return ;
     }
     node* temp = head;
     while(temp->next!=NULL)
     {
          temp=temp->next;
     }
     temp->next=n;
}

// insreting at head
void insertAthead(node* &head,int val)
{
     node* n=new node(val);
     n->next=head;
     head = n;
}

void display(node* head)
{
     node* temp=head;
     while(temp!=NULL)
     {
          cout<<temp->data<<"->";
          temp=temp->next;
     }
     cout<<"NULL"<<endl;
}
// Reverse K node of LinkedList
node* reverseK(node* &head,int k){
	node* prevptr=NULL;
	node* currptr=head;
	node* nextptr;
	int count=0;
	
	while(currptr!=NULL && count<k){
		nextptr=currptr->next;
		currptr->next=prevptr;
		prevptr=currptr;
		currptr=nextptr;
		count++;
	}
	if(nextptr!=NULL){
		head->next=reverseK(nextptr,k);
	}
	return prevptr;
}
int main() {
	
	node* head=NULL;
	insertAtTail(head,10);
	insertAtTail(head,20);
	insertAtTail(head,30);
	insertAtTail(head,40);
	insertAtTail(head,50);
	
	display(head);
	
	int k=2;
	node* newhead=reverseK(head,2);
	display(newhead);
	
	return 0;
	
}
