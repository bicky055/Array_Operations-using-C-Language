#include <iostream>
using namespace std;

class node
{
     public :
     int data;
     node *next;
     node(int val)
     {
           data = val;
          next = NULL;
     }
};
//Implementation

void insertAtTail(node* &head,int val)
{
     node* n=new node(val);
     //check 1st
     if(head==NULL){
          head=n;
          return ;
     }
     node* temp = head;
     while(temp->next!=NULL)
     {
          temp=temp->next;
     }
     temp->next=n;
}

// insreting at head
void insertAthead(node* &head,int val)
{
     node* n=new node(val);
     n->next=head;
     head = n;
}

// Linear Search

bool search(node* head,int key)
{
     node* temp=head;
     while(temp!=NULL)
     {
          if(temp->data==key)
          {
               return true;
          }
          temp=temp->next;
     }
      return false;
}

//Q put Even position Nodes after odd position
    //1->2->3->4->5->6->NULL i/p
    //1->3->5->2->4->6->NULL o/p

void evenAfterOdd(node* &head){
	node* odd=head;
	node* even=head->next;
	node* evenStart=even;

	while(odd->next!=NULL && even->next!=NULL){
		odd->next=even->next;
		odd=odd->next;

		even->next=odd->next;
		even=even->next;
	}

	odd->next=evenStart;
	if(odd->next!=NULL){
		even->next=NULL;
	}
}

void display(node* head)
{
     
     node* temp=head;
     while(temp!=NULL)
     {
          cout<<temp->data<<"->";
          temp=temp->next;
     }
     cout<<"NULL"<<endl;
}

int main(){
	node* head=NULL;

	int arr[]={1,2,3,4,5,6};
	for(int i=0;i<6;i++){
		insertAtTail(head,arr[i]);
	}
	display(head);

	evenAfterOdd(head);
	display(head);

	return 0;
}
