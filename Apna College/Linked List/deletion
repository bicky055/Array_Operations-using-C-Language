#include <iostream>
using namespace std;

class node
{
     public :
     int data;
     node *next;
     node(int val)
     {
           data = val;
          next = NULL;
     }
};
//Implementation

void insertAtTail(node* &head,int val)
{
     node* n=new node(val);
     //check 1st
     if(head==NULL){
          head=n;
          return ;
     }
     node* temp = head;
     while(temp->next!=NULL)
     {
          temp=temp->next;
     }
     temp->next=n;
}

// insreting at head
void insertAthead(node* &head,int val)
{
     node* n=new node(val);
     n->next=head;
     head = n;
}

// Linear Search

bool search(node* head,int key)
{
     node* temp=head;
     while(temp!=NULL)
     {
          if(temp->data==key)
          {
               return true;
          }
          temp=temp->next;
     }
      return false;
}

// Delete opretion

void deletion(node* &head,int val)
{
     node* temp=head;
     while(temp->next->data!=val)
     {
          temp=temp->next;
     }
     node* todelete=temp->next;
     temp->next=temp->next->next;
     
     delete todelete;
}

void display(node* head)
{
     node* temp=head;
     while(temp!=NULL)
     {
          cout<<temp->data<<"->";
          temp=temp->next;
     }
     cout<<"NULL"<<endl;
}
// when delete 1st node
void deleteAThead(node* &head)
{
     node* todelete=head;
     head=head->next;
     
     delete todelete;// its importent bcz memory is liked if u dont delete
}
int main() {
	
	node* head=NULL;
	insertAtTail(head,10);
	insertAtTail(head,20);
	insertAtTail(head,30);
	insertAtTail(head,40);
	insertAtTail(head,50);
	
	display(head);
	
	
	deletion(head,40);
	display(head);
	deleteAThead(head);
	display(head);
	return 0;
}
