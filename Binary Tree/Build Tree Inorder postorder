#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	struct Node* lchild;
	struct Node* rchild;
	Node(int val){
		data=val;
		lchild=NULL;
		rchild=NULL;
	}
	
};

int search(int inorder[],int start,int end,int val){
	for(int i=start;i<=end;i++){
		if(inorder[i]==val){
			return i;
		}
	}
	return -1;
}

Node* buildTree(int postorder[],int inorder[],int start,int end ){
	static int idx=4;
	//base case
	if(start>end){
		return NULL;
	}
	int val=postorder[idx];
	idx--;

    Node* curr=new Node(val);
	if(start==end){ return curr ;}

	int pos=search(inorder,start,end,val);
	curr->rchild=buildTree(postorder,inorder,pos+1,end);
	curr->lchild=buildTree(postorder,inorder,start,pos-1);
	

	return curr;
}
void inorderprint(struct Node* root){

	if(root==NULL){
		return ;
	}
	inorderprint(root->lchild);
	cout<<root->data<<" ";
	inorderprint(root->rchild);
}

int main(){
	int postorder[]={4,2,5,3,1};
	int inorder[]={4,2,1,5,3};

	//build Tree
	Node* root = buildTree(postorder,inorder,0,4);

	inorderprint(root);
      return 0;
}
