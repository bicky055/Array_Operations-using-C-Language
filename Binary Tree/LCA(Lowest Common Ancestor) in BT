#include<iostream>
#include<queue>
#define endl "\n"
using namespace std;

struct Node{
	int data;
	struct Node* lchild;
	struct Node* rchild;
	Node(int val){
		data=val;
		lchild=NULL;
		rchild=NULL;
	}
};

bool getpath(Node* root,int key,vector<int> &path){
	if(root==NULL){
		return false;
	}
	path.push_back(root->data);
	if(root->data==key){
      return true;
	}
	if(getpath(root->lchild,key,path)|| getpath(root->rchild,key,path)){
		return true;
	}
	path.pop_back();
	return false;
}

int LCA(Node* root,int n1,int n2){
	std::vector<int> path1,path2;
	if(!getpath(root,n1,path1) || !getpath(root,n2,path2)){
		return -1;
	}
	int pc; //path_change
	for(pc=0;pc<path1.size()&&path2.size();pc++){
		if(path1[pc]!=path2[pc]){
			break;
		}
	}
	return path1[pc-1];
}

//M-2 
Node* LCA2(Node* root,int n2,int n1){
	if(root==NULL){
		return NULL;
	}
	if(root->data==n1 || root->data==n2){
		return root;
	}
	Node* leftLCA=LCA2(root->lchild,n2,n1);
	Node* rightLCA=LCA2(root->rchild,n2,n1);

	if(leftLCA&& rightLCA){
		return root;
	}
	if(leftLCA!=NULL){
		return leftLCA;
	}
	return rightLCA;
}

int main(){
	Node* root=new Node(1);
	root->lchild=new Node(2);
	root->rchild=new Node(3);
	root->lchild->lchild=new Node(4);
	root->rchild->lchild=new Node(5);
	root->rchild->rchild=new Node(6);
	root->rchild->lchild->lchild=new Node(7);

    /*int n1=7,n2=6;
    int lca=LCA(root,n1,n2);
    if(lca==-1){
    	cout<<"LCA doesn't exist"<<endl;
    }
    else{
    	cout<<"LCA :"<<lca<<endl;
    }*/

    int n1=7,n2=6;
    Node* lca=LCA(root,n1,n2);
    if(lca==NULL){
    	cout<<"LCA doesn't exist"<<endl;
    }
    else{
    	cout<<"LCA :"<<lca->data<<endl;
    }


  return 0;
}
