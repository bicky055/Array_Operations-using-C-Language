#include"bits/stdc++.h"
using namespace std;

struct Node{
	int data;
	struct Node* lchild;
	struct Node* rchild;
	Node(int val){
		data=val;
		lchild=NULL;
		rchild=NULL;
	}
};

int height(Node* root){
	if(root==NULL){
		return 0;
	}
	int lh=height(root->lchild);
	int rh=height(root->rchild);
	return max(lh,rh)+1;
}

bool isBalanced(Node* root){
	if(root==NULL){
		return true;
	}
	if(isBalanced(root->lchild)==false){
		return false;
	}
	if(isBalanced(root->rchild)==false){
		return false;
	}
	int lh=height(root->lchild);
	int rh=height(root->rchild);
	if(abs(lh-rh)<=1){
		return true;
	}
	else
	{
		return false;
	}
}

//M-2 O(n) time complaxity
bool isBalanced2(Node* root,int* height){
	if(root==NULL){
		return true;
	}
	int lh=0,rh=0;
	if(isBalanced2(root->lchild,&lh)==false){
		return false;
	}
	if(isBalanced2(root->rchild,&rh)==false){
		return false;
	}
	*height=max(lh,rh)+1;
	if(abs(lh-rh)<=1){
		return true;
	}
	else{
		return false;
	}
}
int main(){
	struct Node* root1=new Node(1);
	root1->lchild=new Node(2);
	root1->rchild=new Node(3);
	root1->lchild->lchild=new Node(4);
	root1->lchild->rchild=new Node(5);
	root1->rchild->lchild=new Node(6);
	root1->rchild->rchild=new Node(7);

	Node* root2=new Node(1);
	root2->lchild=new Node(2);
	root2->lchild->lchild=new Node(3);
	int height=0;

    if(isBalanced2(root2,&height))
    {
    	cout<<"Balanced Tree"<<"\n";

    }
    else{
    	cout<<"Unbalanced Tree"<<"\n";
    }
    
    return 0;
}
